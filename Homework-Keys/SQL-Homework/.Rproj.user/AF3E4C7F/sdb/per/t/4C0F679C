{
    "contents" : "---\ntitle: \"SQL Homework\"\nauthor: \"by Craig W. Slinkman\"\ndate: \"November 25, 2015\"\noutput: html_document\n---\n\nThe homework is done using R-Markdown and embedded SQL so that the one file can be used to show the entire homework.  All quieries were first run on the SQLite Query program and then copies into embeded SQL.  \n\n# Q1\n1.\tHow many teams were there in the year 2014 in major league baseball?\n\n```{r Q1}\n#\n###########################################################\n# Load package, specify path to SQLite database, and      #\n# connect to database.                                    #\n###########################################################\n#\nrequire( RSQLite )\nrequire( DBI )\n\nDB <- \"C:/Users/Craig/Databases/lahman2014.sqlite\"\n\ndb <- dbConnect(SQLite(), dbname = DB )\n#\n#\n###########################################################\n# Create query string                                     #\n###########################################################\n#\nquery <- \n    \"SELECT  count( * )\n     FROM    Teams\n     WHERE   yearID = 2014;\"\n#\n#\n###########################################################\n# We use dbGetQuery which sends, fetches and clears for   #\n# you. The result us stored in an R data frame which we   #\n# auto-print.                                             #\n###########################################################\n#\nResults <- \n    dbGetQuery( db,\n                query )\nResults\n#\n#\n##########################################################\n# Disconnect from database to free shared resources.     #\n##########################################################\n\ndbDisconnect( db )\n```\n\n# Q2\n2.\tUse the _GROUP BY_ statement to count the number of __Teams__ in the American and National Leagues in the year 1960.  \n\n```{r Q2}\n#\n###########################################################\n# Load package, specify path to SQLite database, and      #\n# connect to database.                                    #\n###########################################################\n#\nrequire( RSQLite )\nrequire( DBI )\n\nDB <- \"C:/Users/Craig/Databases/lahman2014.sqlite\"\n\ndb <- dbConnect(SQLite(), dbname = DB )\n#\n#\n###########################################################\n# Create query string.                                     #\n###########################################################\n#\nquery <- \n    \"SELECT  lgID,\n             count( * )\n     FROM    Teams\n     WHERE   yearID = 1960\n     GROUP BY lgID;\"\n#\n#\n###########################################################\n# We use dbGetQuery which sends, fetches and clears for   #\n# you. The result us stored in an R data frame which we   #\n# auto-print.                                             #\n###########################################################\n#\nResults <- \n    dbGetQuery( db,\n                query )\nResults\n#\n#\n##########################################################\n# Disconnect from database to free shared resources.     #\n##########################################################\n\ndbDisconnect( db )\n\n```\n\n\n# Q3\nList all the playerds who played for the Texas Rangers who were not Pitchers during the 2010 season.  Use the Batting Table and the Master table to answer this question.  You only need to show the batters that show up on the first page.  \n\n```{r Q3}\n#\nrequire( RSQLite )\nrequire( DBI )\n\nDB <- \"C:/Users/Craig/Databases/lahman2014.sqlite\"\n\ndb <- dbConnect(SQLite(), dbname = DB )\n#\n#\n###########################################################\n# Create query string.                                     #\n###########################################################\n#\nquery <- \n    \"SELECT  M.nameLast || ', ' || M.nameFirst AS `Batter`\nFROM    Batting B\n        NATURAL JOIN MASTER M\nWHERE   B.teamID = 'TEX'\n  AND   B.yearID = 2010\"\n#\n#\n###########################################################\n# We use dbGetQuery which sends, fetches and clears for   #\n# you. The result us stored in an R data frame which we   #\n# auto-print.                                             #\n###########################################################\n#\nResults <- \n    dbGetQuery( db,\n                query )\nhead( Results, 10 )\ntail( Results, 10 )\n#\n#\n##########################################################\n# Disconnect from database to free shared resources.     #\n##########################################################\n\ndbDisconnect( db )\n\n```\n\n# Q4\nRepeat Question 3 including using the Pitching table instead of the Batting \n\n```{r Q4}\n#\nrequire( RSQLite )\nrequire( DBI )\n\nDB <- \"C:/Users/Craig/Databases/lahman2014.sqlite\"\n\ndb <- dbConnect(SQLite(), dbname = DB )\n#\n#\n###########################################################\n# Create query string.                                    #\n###########################################################\n#\nquery <- \n    \"SELECT  M.nameLast || ', ' || M.nameFirst AS `Pitcher`\nFROM    Pitching P\n        NATURAL JOIN MASTER M\nWHERE   P.teamID = 'TEX'\n  AND   P.yearID = 2010\"\n#\n#\n###########################################################\n# We use dbGetQuery which sends, fetches and clears for   #\n# you. The result us stored in an R data frame which we   #\n# auto-print.                                             #\n###########################################################\n#\nResults <- \n    dbGetQuery( db,\n                query )\nhead( Results, 10 )\ntail( Results, 10 )\n#\n#\n##########################################################\n# Disconnect from database to free shared resources.     #\n##########################################################\n\ndbDisconnect( db )\n\n```\n\n# Q5\n5.\tGo to the SQLite documentation and look up the UNION statement.  Use the UNION statement to get all the players.\n\n```{r Q5}\n#\nrequire( RSQLite )\nrequire( DBI )\n\nDB <- \"C:/Users/Craig/Databases/lahman2014.sqlite\"\n\ndb <- dbConnect(SQLite(), dbname = DB )\n#\n#\n###########################################################\n# Create query string.                                    #\n###########################################################\n#\nquery <- \n\"SELECT  M.nameLast || ', ' || M.nameFirst AS `Player`\n FROM    Batting B\n         NATURAL JOIN \n         MASTER M\n WHERE   B.teamID = 'TEX'\n   AND   B.yearID = 2010\n UNION\n SELECT  M.nameLast || ', ' || M.nameFirst AS `Player`\n  FROM   Pitching P\n         NATURAL JOIN \n         MASTER M\n  WHERE  P.teamID = 'TEX'\n    AND   P.yearID = 2010;\"\n#\n#\n###########################################################\n# We use dbGetQuery which sends, fetches and clears for   #\n# you. The result us stored in an R data frame which we   #\n# auto-print.                                             #\n###########################################################\n#\nResults <- \n    dbGetQuery( db,\n                query )\nResults\n#\n#\n##########################################################\n# Disconnect from database to free shared resources.     #\n##########################################################\n\ndbDisconnect( db )\n\n```\n\n$ \n```{r Q6}\n#\nrequire( RSQLite )\nrequire( DBI )\n\nDB <- \"C:/Users/Craig/Databases/lahman2014.sqlite\"\n\ndb <- dbConnect(SQLite(), dbname = DB )\n#\n#\n###########################################################\n# Create query string.                                    #\n###########################################################\n\nquery <-\n\"DROP VIEW IF EXISTS Rangers2010\"\n\ndbSendQuery( db, query )\n\nquery <- \n\"CREATE VIEW Rangers2010\nAS\n    SELECT  M.nameLast || ', ' || M.nameFirst AS `Player`\n    FROM    Batting B\n            NATURAL JOIN \n            MASTER M\n    WHERE   B.teamID = 'TEX'\n      AND   B.yearID = 2010\n    UNION\n    SELECT  M.nameLast || ', ' || M.nameFirst AS `Player`\n    FROM    Pitching P\n            NATURAL JOIN \n            MASTER M\n    WHERE   P.teamID = 'TEX'\n      AND   P.yearID = 2010;\"\n#\n#\n###########################################################\n# We use dbGetQuery which sends, fetches and clears for   #\n# you. The result us stored in an R data frame which we   #\n# auto-print.                                             #\n###########################################################\n#\nResults <- \n    dbGetQuery( db,\n                query )\n\n#\n#\n##########################################################\n# Note that no results are sent back by the CREATE VIEW  #\n# DDL command.  So we will exexute a select statement    #\n# Using the view.  It should give us the same relats as  #\n# Q5.                                                    #\n##########################################################\n\nquery <-\n\"SELECT * \n FROM Rangers2010;\"\n\nResults <- dbGetQuery(db, query )\nhead( Results, 10 )\ntail( Results, 10 )\n#\n#\n##########################################################\n# Disconnect from database to free shared resources.     #\n##########################################################\n\ndbDisconnect( db )\n\n```\n\n# Q7\nUse the view you just created to produce a list of the Rangers who played in 2010 sorted in order by last name, and then first name.  Print the names in the same order.\n\n```{r Q7}\n#\nrequire( RSQLite )\nrequire( DBI )\n\nDB <- \"C:/Users/Craig/Databases/lahman2014.sqlite\"\n\ndb <- dbConnect(SQLite(), dbname = DB )\n#\n#\n###########################################################\n# Create query string.                                    #\n###########################################################\n\nquery <-\n\"SELECT * \n FROM Rangers2010;\"\n\nResults <- dbGetQuery(db, query )\nhead( Results, 10 )\ntail( Results, 10 )\n#\n#\n##########################################################\n# Disconnect from database to free shared resources.     #\n##########################################################\n\ndbDisconnect( db )\n\n```\n\n# Acess function \nWe can simply the code by placing the database call in an function.  We then will` call the function with the qurey and the function will return the resuls.\n\n```{r AccessFunction}\n#\nrequire( RSQLite )\nrequire( DBI )\n\ngetLahman <- function( query ){\n    DB <- \"C:/Users/Craig/Databases/lahman2014.sqlite\"\n    db <- dbConnect(SQLite(), dbname = DB )\n    Results <- dbGetQuery( db, query)\n    dbDisconnect( db )\n    Results\n}\n\n```\n\nWe now test the function using a query.\n\n```{r TestFunction}\nquery <- \n\"Select  playerID,\n         nameLast,\n         nameFirst\nFROM     MASTER\nWHERE    nameLast = 'Pence'\n  AND    nameFirst = 'Hunter';\"\nResults <- getLahman(  query  )\nResults\n\n```\n  \nWe will use the getLahman function to answer the rest questions.\n\n# Q8\nI have alreay include this functionality in the __VIEW__ _Ramgers2010_.  See question Q6.  \n\n# Q9\nCount the number of years that Babe Ruth played major league baseball.  There is only one player in the history of baseball with the last name of Ruth.\n\n```{r Q9}\n\nquery <-\n\"SELECT count(*)\n FROM   Master M\n        NATURAL JOIN\n        Batting B\nWHERE   M.nameLast = 'Ruth';\"\n#\nResults <- getLahman( query )\nResults\n\n```\n  \n# Q10\n10.\tCompute the total salaries of every major league baseball team in the year 2014.  List the team name and the total salaries.  \n\n```{r Q10}\nquery <-\n\"SELECT   franchName as `Team`,\n         SUM( salary ) AS `Team Salary`\nFROM     TeamsFranchises F\n         NATURAL JOIN\n         Teams T  \n         NATURAL JOIN \n         Salaries S       \nWHERE    T.yearID = 2014\nGROUP BY T.teamID\nORDER BY `Team Salary` DESC;\"\n\nResults <- getLahman( query  )\nResults\n\n```\n\n\n# Q11\n11.\tCompute the percent of runs scored for the Texas Rangers player Elvis Andres for the 2010 baseball season compared to the total runs scored by the team.  Hint you will need to three select statements to do this in a single select your query should have a structure that  looks something like this:\n\nSELECT ( SELECT ….. FROM  … WHERE …  ) / ( SELECT …. FROM …WHERE ….  )\n\n```{r Q11}\n\nquery <-\n    \"SELECT \n      ( SELECT  100 * CAST( B.R AS FLOAT )\n        FROM    Master M\n                NATURAL JOIN\n                Batting B\n         WHERE   M.nameLast = 'Andrus'\n         AND  M.nameFirst = 'Elvis'\n         AND  B.yearID = 2010 )\n         / \n      ( SELECT R\n           FROM   Teams\n           WHERE  teamID = 'TEX'\n           and    yearID = 2010 ) AS `Percent Runs`;\"\n\nResult <- getLahman(  query )\nResult\n\n```\n\n# Q12\nConsider the Batting statistics tables.  Some of the modern statistics have only been kept recently.  Amount these statistics are IBB (Intentional walks) and HBP (Hit by Pitch).  Write a query that will give the first year that both statistics were kept.  You will need this year in the next query.  \n\n```{r Q12}\n\nquery <- \n\"SELECT max( yearID )\nFROM   Batting\nWHERE  IBB IS NULL\n  AND  HBP IS NULL;\"\n\nResults <- getLahman( query )\nResults\n\n```\n\n# Q13\n13.\t Create a view call BPerformance from the Batting table for all years equal to or greater than the year you discovered in Question 12.   In your view the original Batting columns and include the following new columns.\n\n## Column name\tEquation\nBA\tBA = HITS / AB\nOBP\tOBP = ( H + BB + IBB +HBP ) / (AB + + BB + IBB +HBP)\nSLG\tSLG = ( H + `2B` + 2 * `3B` + 3 * HR ) / AB\nNote: that SQL variables that start with numbers must be enclosed in backward quotes.\n\nNote that you will need to cast (change) one expression to a floating point number to get decimal answers for BA, OBP, and SLG.  We do this with the SQLite CAST function.  For example, the expression to compute the batting will look like:\n\n```{r }\n\ndropView <-\n    \"DROP VIEW IF EXISTS BPerformance\"\n\nrequire( RSQLite )\nrequire( DBI )\n\nDB <- \"C:/Users/Craig/Databases/lahman2014.sqlite\"\n\ndb <- dbConnect(SQLite(), dbname = DB )\ndbSendQuery( db, dropView )\n\nquery <- \n\"CREATE VIEW  BPerformance\nAS \nSELECT   *,\n         CAST( H AS FLOAT) / AB AS BA,\n         ( CAST( H AS FLOAT) + BB + IBB + HBP ) / ( CAST( AB AS FLOAT) + BB + IBB + HBP ) AS OBP,\n         ( CAST( H AS FLOAT) + `2B` + 2 * `3B` +3 * HR ) / AB AS SLG\nFROM     Batting\nWHERE    yearID > 1999;\"\n\nquery <- dbSendQuery( db, query)\n\n```\n# Q14\n14.\tUse the view you just created to list the Texas Rangers players for the 2014 season.  Return the players last name, BA, OPB, SLG, and the sum of OPB and SLG as a variable called OPS.  Order the players by OPS in descending order.  Only list the players with at least 100 bats.\n\n```{r Q14}\n\nquery <-\n\"SELECT   nameLast,\n         BA,\n         OBP,\n         SLG\nFROM     BPerformance\n         NATURAL JOIN\n         Master\nWHERE    teamID = 'TEX'\n  AND    yearID = 2014\n  AND    AB > 100\nORDER BY OBP DESC;\"\n\nResults <- getLahman( query )\nResults\n\n```\n\n# Q15\n15.\tUse a nested query to determine the name of player or players who have the highest salary in MLB for the year 2014.  List the first and last names.  \n\n```{r Q15}\n\nquery <- \n\" SELECT nameLast,\n        salary\n FROM   Master\n        NATURAL JOIN\n        Salaries S\nWHERE S.Salary IN \n    ( SELECT  max( salary )\n      FROM    Salaries\n      WHERE   yearID = 2014 );\"\n\nResults <- getLahman( query )\nResults\n\n```\n\n# Q16\n16.\tUse SQL to determine which of those players plaid for the Texas Rangers.\n\n```{r Q16}\n\n\n```\n\n\n\n\n",
    "created" : 1448472336634.000,
    "dirty" : false,
    "encoding" : "ISO8859-1",
    "folds" : "",
    "hash" : "3633152530",
    "id" : "4C0F679C",
    "lastKnownWriteTime" : 1448489469,
    "path" : "C:/Users/Craig/utaDatabase/Homework-Keys/SQL-Homework/SQL-Homework-Key.Rmd",
    "project_path" : "SQL-Homework-Key.Rmd",
    "properties" : {
        "tempName" : "Untitled2"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_markdown"
}