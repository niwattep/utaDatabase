dbSendPreparedQuery(
db,
"SELECT * FROM Customer WHERE phone= ?",
data.frame( phone ))
```
phone
DF
# Advanced R-database programming
##########################################################
# Clear the R-ennvironment, that us remove all objects   #
# from memory.                                           #
##########################################################
#
rm( list=ls())
#
#
##########################################################
# We are going to use the Chinook database in the my     #
# Databases table.  The character variable below points  #
# to the Chinook database.                               #
##########################################################
#
DB <- "C:/Users/Craig/Databases/Chinook.sqlite"
DB <- "C:/Users/Craig/Databases/Chinook.sqlite"
#
#
#########################################################
# We need to load the RSQLite software from the library #
# and the database interface software.                  #
#########################################################
#
loaded <- require( RSQLite )
{
if( loaded )
print( "SQLIte package loaded." )
} else {
stop( "SQLite package not loaded.")
}
#
#
#########################################################
# Now we can connect to the actual database.            #
#########################################################
#
db <- dbConnect( SQLite(), DB)
#
#
########################################################
# We can get all the results at once by using the      #
# dbGetGuery function.                                 #
########################################################
#
Artist <- dbGetQuery( db,
"SELECT * FROM Artist" )
########################################################
# Close connection to free up database resources. You  #
# always do this becuase you are sharing resourcews    #
# other users.                                         #
########################################################
#
RC <- dbDisconnect( db )
#
#
#######################################################
# Confirm thge database connection closed sucessfully.#
# If not display error message and stop.              #
#######################################################
#
#
#######################################################
# Now we can display the contents of the Artist table #
# using R's autoprint feature. Here I will only print #
# the first 10 rows of the table.                     #
#######################################################
#
Artist[1:10,]
rm( list=ls())
DB <- "C:/Users/Craig/Databases/Chinook.sqlite"
#
loaded <- require( RSQLite )
db <- dbConnect( SQLite(), DB)
resultSet <-
dbSendQuery( db,
"SELECT *
FROM Artist" )
resultSet
Artist <- dbFetch( resultSet, n=-1 )
dbClearResult( resultSet )
rc <- dbDisconnect( db )
Artist[1:10,]
# Advanced R-database programming I
##########################################################
# Clear the R-ennvironment, that us remove all objects   #
# from memory.                                           #
##########################################################
#
rm( list=ls())
#
#
##########################################################
# We are going to use the Chinook database in the my     #
# Databases table.  The character variable below points  #
# to the Chinook database.                               #
##########################################################
#
DB <- "C:/Users/Craig/Databases/Chinook.sqlite"
#
#
#########################################################
# We need to load the RSQLite software from the library #
# and the database interface software.                  #
########################################### Advanced R-database programming I
##########################################################
# Clear the R-ennvironment, that us remove all objects   #
# from memory.                                           #
##########################################################
#
rm( list=ls())
#
#
##########################################################
# We are going to use the Chinook database in the my     #
# Databases table.  The character variable below points  #
# to the Chinook database.                               #
##########################################################
#
DB <- "C:/Users/Craig/Databases/Chinook.sqlite"
#
#
#########################################################
# We need to load the RSQLite software from the library #
# and the database interface software.                  #
#########################################################
#
loaded <- require( RSQLite )
#
#
#########################################################
# Now we can connect to the actual database.            #
#########################################################
#
db <- dbConnect( SQLite(), DB)
#
#
########################################################
# We can get all the results at once by using the      #
# dbGetGuery function.                                 #
########################################################
#
resultSet <-
dbSendQuery( db,
"SELECT *
FROM Artist"
)
#
#
###########################################################
# We will now loop throgh the reult set one row at a time #
# displaying each row in turn,                            #
###########################################################
#
while (!dbHasCompleted( resultSet )) {
Artist <- dbFetch( resultSet , 1 )
print( Artist )
}
#
#
###########################################################
# Close resultset to free DBMS resources.                 #
###########################################################
#
dbClearResult( resultSet )
#
#
###########################################################
# Close database connection to free more DBMS sgared      #
# resources.                                              #
###########################################################
#
dbDisconnect( db )###############
#
loaded <- require( RSQLite )
#
#
#########################################################
# Now we can connect to the actual database.            #
#########################################################
#
db <- dbConnect( SQLite(), DB)
#
#
########################################################
# We can get all the results at once by using the      #
# dbGetGuery function.                                 #
########################################################
#
resultSet <-
dbSendQuery( db,
"SELECT *
FROM Artist"
)
#
#
###########################################################
# We will now loop throgh the reult set one row at a time #
# displaying each row in turn,                            #
###########################################################
#
while (!dbHasCompleted( resultSet )) {
Artist <- dbFetch( resultSet , 1 )
print( Artist )
}
#
#
###########################################################
# Close resultset to free DBMS resources.                 #
###########################################################
#
dbClearResult( resultSet )
#
#
###########################################################
# Close database connection to free more DBMS sgared      #
# resources.                                              #
###########################################################
#
dbDisconnect( db )
source('C:/Users/Craig/utaDatabase/EmbeddedSQL/AdvancedSQLite4.R')
# AdvancedSQLite4.r
###########################################################
# The R-scrippt shows how to execute a prepared query     #
# in the insert statement.  Cirrently, the insert         #
# is the only SQLite statement that is supported by       #
# the RSQLite package.                                    #
###########################################################
#
#
##########################################################
# Load the RSQLite package for SQLite connections.       #
##########################################################
#
require( RSQLite )
#
#
# AdvancedSQLite4.r
###########################################################
# The R-scrippt shows how to execute a prepared query     #
# in the insert statement.  Cirrently, the insert         #
# is the only SQLite statement that is supported by       #
# the RSQLite package.                                    #
###########################################################
#
#
##########################################################
# Load the RSQLite package for SQLite connections.       #
##########################################################
#
require( RSQLite )
#
#
Albums <- read.csv( "NewAlbum.csv" )
dir()
Albums <- read.csv( "NewAlbums.csv" )
source('C:/Users/Craig/utaDatabase/EmbeddedSQL/AdvancedSQLite4.R')
# AdvancedSQLite4.r
###########################################################
# The R-scrippt shows how to execute a prepared query     #
# in the insert statement.  Cirrently, the insert         #
# is the only SQLite statement that is supported by       #
# the RSQLite package.                                    #
###########################################################
#
#
##########################################################
# Clear memory of variables.                             #
##########################################################
#
rm( list=ls())
#
#
##########################################################
# Load the RSQLite package for SQLite connections.       #
##########################################################
#
require( RSQLite )
#
#
#########################################################
# Load the NewAlbum.csv file as a data frame.           #
#########################################################
#
Albums <- read.csv( "NewAlbums.csv" )
#
#
#########################################################
# Define path to database.                              #
#########################################################
rm( list=ls())
# AdvancedSQLite4.r
###########################################################
# The R-script shows how to execute a prepared query      #
# in the insert statement.  Cirrently, the insert         #
# is the only SQLite statement that is supported by       #
# the RSQLite package.                                    #
###########################################################
#
#
##########################################################
# Clear memory of variables.                             #
##########################################################
#
rm( list=ls())
#
#
##########################################################
# Load the RSQLite package for SQLite connections.       #
##########################################################
#
require( RSQLite )
#
#
#########################################################
# Load the NewAlbum.csv file as a data frame.           #
#########################################################
#
Albums <- read.csv( "NewAlbums.csv" )
#
#
#########################################################
# Define path to database.                              #
#########################################################
#
DB <- "C:/Users/Craig/Databases/Chinook.sqlite"
#
#
#########################################################
# Determine the number of rows un the input data frame. #
#########################################################
#
size <- dim( NewAlbums)
size <- dim( Albums )
rows <- size[1]
con <- dbConnect( RSQLite(), DB )
con <- dbConnect(SQLite(), DB )
DB
con
?stopifnot
DB <- "Test.sqlite"
con <- dbConnect(SQLite(), DB )
#
#
########################################################
# Check to assure that connection has been made.       #
########################################################
#
sstopifnot( con == "<SQLiteConnection>" )
stopifnot( con == "<SQLiteConnection>" )
print( con )
str( con )
con@Id
con$dbname
con@dbname
con <- dbConnect(SQLite(), DB )
con
?stop
if( con != "<SQLiteConnection>" )
stop("Database connection not made. Execution halted")
if( con != "<SQLiteConnection>" )
stop("Database connection not made. Execution halted")
# AdvancedSQLite4.r
###########################################################
# The R-script shows how to execute a prepared query      #
# in the insert statement.  Cirrently, the insert         #
# is the only SQLite statement that is supported by       #
# the RSQLite package.                                    #
###########################################################
#
#
##########################################################
# Clear memory of variables.                             #
##########################################################
#
rm( list=ls())
#
#
##########################################################
# Load the RSQLite package for SQLite connections.       #
##########################################################
#
require( RSQLite )
#
#
#########################################################
# Load the NewAlbum.csv file as a data frame.           #
#########################################################
#
Albums <- read.csv( "NewAlbums.csv" )
#
#
#########################################################
# Define path to database.                              #
#########################################################
#
DB <- "C:/Users/Craig/Databases/Shinook.sqlite"
#
#
#########################################################
# Determine the number of rows un the input data frame. #
#########################################################
#
size <- dim( Albums )
rows <- size[1]
#
#
#########################################################
# Connect to the database.                              #
#########################################################
DB <- "Test.sqlite"
con <- dbConnect(SQLite(), DB )
#
#
########################################################
# Check to assure that connection has been made.       #
########################################################
#
if( con != "<SQLiteConnection>" )
stop("Database connection not made. Execution halted")
con
con$Id
con@Id
con@dbname
source('C:/Users/Craig/utaDatabase/EmbeddedSQL/AdvancedSQLite4.R')
success <- dbDisconnect( con )
Success
success
success <- dbDisconnect( con )
# AdvancedSQLite4.r
###########################################################
# The R-script shows how to execute a prepared query      #
# in the insert statement.  Cirrently, the insert         #
# is the only SQLite statement that is supported by       #
# the RSQLite package.                                    #
###########################################################
#
#
##########################################################
# Clear memory of variables.                             #
##########################################################
#
rm( list=ls())
#
#
##########################################################
# Load the RSQLite package for SQLite connections.       #
##########################################################
#
require( RSQLite )
#
#
#########################################################
# Load the NewAlbum.csv file as a data frame.           #
#########################################################
#
Albums <- read.csv( "NewAlbums.csv" )
#
#
#########################################################
# Define path to database.                              #
#########################################################
#
DB <- "C:/Users/Craig/Databases/Shinook.sqlite"
#
#
#########################################################
# Determine the number of rows un the input data frame. #
#########################################################
#
size <- dim( Albums )
rows <- size[1]
#
#
#########################################################
# Connect to the database.                              #
#########################################################
DB <- "Test.sqlite"
con <- dbConnect(SQLite(), DB )
#
#
########################################################
# In production software we should check to see.if the #
# database connection was successful.  We will not do  #
# this here to keep things sinople for the non-        #
# programers amound is.                                #
########################################################
#
#
#
########################################################
# We will loop throught the input data frame.          #
#                                                      #
# 1. Check tp see if the album exists. If so we do not #
#     need to add it.                                  #
########################################################
for( rows in 1:rows ){
}
########################################################
# Free up resources be dosconnection from the database.#
########################################################
#
success <- dbDisconnect( con )
success
source('C:/Users/Craig/utaDatabase/EmbeddedSQL/AdvancedSQLite4.R')
